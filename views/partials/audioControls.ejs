<!-- File: views/partials/audioControls.ejs -->
<style>
    .preview-button {
        transition: all 0.2s ease;
    }

    .preview-button:focus {
        outline: none;
    }

    .preview-button.loading {
        opacity: 0.7;
        cursor: wait;
    }

    .icon-play {
        fill: currentColor;
        margin-left: 2px;
    }

    .song-info {
        min-height: 3rem;
    }

    .song-title {
        font-weight: 600;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .song-artist {
        color: #9CA3AF;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .live-indicator {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.75rem;
        color: #9CA3AF;
    }

    .live-dot {
        width: 0.5rem;
        height: 0.5rem;
        border-radius: 9999px;
        background-color: #10B981;
    }

    .song-info {
        min-height: 4rem;
    }

    .song-info img {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
    }

    .song-info:hover img {
        transform: scale(1.05);
    }
</style>

<script>
    window.currentAudio = null;
    window.currentButton = null;
    window.isTransitioning = false;

    const icons = {
        play: `<svg class="icon-play" width="12" height="12" viewBox="0 0 24 24">
              <path d="M8 5v14l11-7z"/>
            </svg>`,
        pause: `<svg width="12" height="12" viewBox="0 0 24 24">
               <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
             </svg>`,
        loading: `<svg width="12" height="12" viewBox="0 0 24 24">
                 <path d="M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"/>
               </svg>`
    };

    function updateButtonStyle(button, state) {
        button.classList.remove(
            'bg-indigo-500', 'bg-indigo-600', 'bg-indigo-700',
            'hover:bg-indigo-600', 'hover:bg-indigo-700',
            'loading'
        );

        switch (state) {
            case 'stopped':
                button.classList.add('bg-indigo-600', 'hover:bg-indigo-700');
                button.innerHTML = icons.play;
                break;
            case 'playing':
                button.classList.add('bg-indigo-700', 'hover:bg-indigo-600');
                button.innerHTML = icons.pause;
                break;
            case 'loading':
                button.classList.add('bg-indigo-600', 'loading');
                button.innerHTML = icons.loading;
                break;
        }
    }

    async function stopPreview() {
        if (window.isTransitioning) return;
        window.isTransitioning = true;

        try {
            if (window.currentAudio) {
                console.log('Stopping audio');

                const audio = window.currentAudio;
                audio.onended = null;
                audio.onpause = null;
                audio.onerror = null;
                audio.onloadedmetadata = null;
                audio.oncanplay = null;
                audio.onplaying = null;

                await audio.pause();
                await new Promise(resolve => setTimeout(resolve, 100));

                if (audio === window.currentAudio) {
                    audio.src = '';
                    audio.load();
                    window.currentAudio = null;
                }
            }

            if (window.currentButton) {
                updateButtonStyle(window.currentButton, 'stopped');
                window.currentButton = null;
            }
        } catch (error) {
            console.error('Error in stopPreview:', error);
        } finally {
            window.isTransitioning = false;
        }
    }

    function updateVolume(input, stationId) {
        if (window.currentAudio && window.currentButton &&
            window.currentButton.dataset.stationId === stationId.toString()) {
            window.currentAudio.volume = input.value;
        }
    }

    async function togglePreview(button) {
        if (window.isTransitioning) return;

        const streamUrl = button.dataset.streamUrl;
        const stationId = button.dataset.stationId;

        if (window.currentButton === button && window.currentAudio) {
            await stopPreview();
            return;
        }

        await stopPreview();

        try {
            window.isTransitioning = true;
            window.currentButton = button;
            updateButtonStyle(button, 'loading');

            const audio = new Audio();
            audio.crossOrigin = "anonymous";

            // Set default volume
            audio.volume = 0.1;

            audio.onerror = (e) => {
                console.error('Audio error:', e);
                stopPreview();
                if (!window.isTransitioning) {
                    alert('Error playing preview. Please try again.');
                }
            };

            audio.onloadedmetadata = () => {
                if (audio === window.currentAudio) {
                    updateButtonStyle(button, 'playing');
                    audio.play().catch(error => {
                        console.error('Play error:', error);
                        stopPreview();
                    });
                }
            };

            const volumeControl = document.querySelector(`input[onchange*="${stationId}"]`);
            if (volumeControl) {
                volumeControl.value = 0.1;  // Ensure slider matches default
                audio.volume = volumeControl.value;
            }

            window.currentAudio = audio;
            audio.src = streamUrl;
            await audio.load();

        } catch (error) {
            console.error('Error in togglePreview:', error);
            stopPreview();
        } finally {
            window.isTransitioning = false;
        }
    }

    // Handle search and filter
    function handleSearch(searchInput, genreSelect) {
        const searchTerm = searchInput.value.toLowerCase();
        const selectedGenre = genreSelect.value;
        const stations = document.querySelectorAll('.station-card');
        const genreSections = document.querySelectorAll('.genre-section');

        genreSections.forEach(section => {
            const genreTitle = section.querySelector('.genre-title').textContent.trim();
            const genreStations = section.querySelectorAll('.station-card');
            let visibleStations = 0;

            genreStations.forEach(station => {
                const stationName = station.querySelector('.station-name').textContent.toLowerCase();
                const stationDesc = station.querySelector('.station-description').textContent.toLowerCase();
                const matchesSearch = searchTerm === '' ||
                    stationName.includes(searchTerm) ||
                    stationDesc.includes(searchTerm);
                const matchesGenre = selectedGenre === 'all' || genreTitle === selectedGenre;

                if (matchesSearch && matchesGenre) {
                    station.style.display = '';
                    visibleStations++;
                } else {
                    station.style.display = 'none';
                }
            });

            section.style.display = visibleStations > 0 ? '' : 'none';
        });
    }

    let ws = null;
    let wsConnected = false;
    const songInfos = {};

    function connectWebSocket() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        ws = new WebSocket(`${protocol}//${window.location.host}`);

        ws.onopen = () => {
            console.log('WebSocket Connected');
            wsConnected = true;
            updateAllSongInfoUI();
        };

        ws.onclose = () => {
            console.log('WebSocket Disconnected');
            wsConnected = false;
            updateAllSongInfoUI();
            setTimeout(connectWebSocket, 5000);
        };

        ws.onmessage = (event) => {
            const data = event.data;

            // Handle ping
            if (data === '2') {
                ws.send('3');
                return;
            }

            // Parse song updates
            if (data.startsWith('42["song_updates"')) {
                try {
                    const jsonStr = data.substring(2);
                    const [eventName, songData] = JSON.parse(jsonStr);

                    // Update stored song info for each station
                    Object.entries(songData).forEach(([stationId, info]) => {
                        // Format duration to MM:SS
                        if (info.duration) {
                            const minutes = Math.floor(info.duration / 60);
                            const seconds = info.duration % 60;
                            info.formattedDuration = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                        }

                        songInfos[stationId] = info;
                        updateSongInfoUI(stationId);
                    });
                } catch (error) {
                    console.error('Error parsing song data:', error);
                }
            }
        };
    }

    function updateSongInfoUI(stationId) {
        const container = document.querySelector(`.song-info[data-station-id="${stationId}"]`);
        if (!container) return;

        const info = songInfos[stationId];
        if (!info) {
            container.innerHTML = `
            <div class="flex items-center space-x-2 text-gray-400">
                <div class="w-2 h-2 rounded-full bg-gray-600"></div>
                <span class="text-sm">Waiting for track info...</span>
            </div>
        `;
            return;
        }

        container.innerHTML = `
        <div class="shrink-0">
            <img src="${info.cover || info.default_cover_url}" 
                 alt="Album Art"
                 class="w-16 h-16 rounded-lg object-cover bg-gray-800"
                 onerror="this.src='https://via.placeholder.com/64x64?text=♪';this.onerror=null;">
        </div>
        <div class="flex flex-col min-w-0">
            <div class="song-title text-gray-100 font-semibold truncate">
                ${info.title || 'Unknown Title'}
            </div>
            <div class="song-artist text-gray-400 truncate">
                ${info.artist || 'Unknown Artist'}
            </div>
        </div>
    `;
    }

    function updateAllSongInfoUI() {
        document.querySelectorAll('.song-info').forEach(container => {
            const stationId = container.dataset.stationId;
            updateSongInfoUI(stationId);
        });
    }

    // Initialize WebSocket connection
    connectWebSocket();

    window.addEventListener('beforeunload', stopPreview);

</script>